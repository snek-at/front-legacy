{"version":3,"sources":["Routes.js","App.js","registerServiceWorker.js","index.js"],"names":["Routes","React","Component","render","exact","path","App","console","log","className","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"qPAiBA,MAAMA,UAAeC,IAAMC,UAKzBC,SACE,OACE,kBAAC,IAAD,KAoEE,kBAAC,IAAD,CACEC,OAAK,EACLC,KAAK,IACLF,OAAQ,WACN,OAAO,6CAGX,kBAAC,IAAD,CACEC,OAAK,EACLC,KAAK,SACLF,OAAQ,WACN,OAAO,8CAGX,kBAAC,IAAD,CACEC,OAAK,EACLC,KAAK,gBACLF,OAAQ,WACN,OAAO,+CAGX,kBAAC,IAAD,CACEE,KAAK,sBACLF,OAAQ,WACN,OAAO,8CAGX,kBAAC,IAAD,CACEA,OAAQ,WACN,OAAO,8CAQJH,Q,OC3Hf,MAAMM,UAAYL,IAAMC,UACtBC,SAGE,OAFAI,QAAQC,IAAI,kCAGV,kBAAC,IAAD,KAEE,yBAAKC,UAAU,UAYb,8BAYE,kBAAC,EAAD,UAyBGH,QCpDf,MAAMI,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAIN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAKC,IACJA,EAAaC,cAAgB,KAC3B,MAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,KACA,cAA3BF,EAAiBG,OACfT,UAAUC,cAAcS,eAgBnCC,MAAMC,OChBXC,IAAS5B,OAAO,kBAAC,EAAD,MAAS6B,SAASC,eAAe,SD8ClC,WACb,GAA6C,kBAAmBf,UAAW,CAGzE,GADkB,IAAIgB,IAAIC,GAAwBvB,OAAOC,UAC3CuB,SAAWxB,OAAOC,SAASuB,OAIvC,OAGFxB,OAAOyB,iBAAiB,OAAQ,KAC9B,MAAMpB,EAAK,UAAMkB,GAAN,sBAENzB,EAvCX,SAAiCO,GAE/BqB,MAAMrB,GACHI,KAAKkB,IAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CzB,UAAUC,cAAcyB,MAAMvB,KAAKC,IACjCA,EAAauB,aAAaxB,KAAK,KAC7BT,OAAOC,SAASiC,aAKpB9B,EAAgBC,KAGnBY,MAAM,QAwBHkB,CAAwB9B,GAHxBD,EAAgBC,MC5DxB+B,K","file":"static/js/main.3a0a47fd.chunk.js","sourcesContent":["//> React\n// Contains all the functionality necessary to define React components\nimport React from \"react\";\n// DOM bindings for React Router\nimport { Route, Switch } from \"react-router-dom\";\n\n//> Components\n// import {\n//   HomePage,\n//   ProfilePage,\n//   MessagePage,\n//   RedirectPage,\n//   SearchPage,\n//   CompanyPage,\n//   TalkPage,\n// } from \"./components/pages\";\n\nclass Routes extends React.Component {\n  // saveSettings = (state) => {\n  //   this.props.saveSettings(state);\n  // };\n\n  render() {\n    return (\n      <Switch>\n        {/* <Route\n          exact\n          path=\"/\"\n          component={(props) => (\n            <HomePage\n              login={this.props.login}\n              globalState={this.props.globalState}\n              globalFunctions={this.props.globalFunctions}\n              registerUser={this.props.registerUser}\n              {...props}\n            />\n          )}\n        />\n        <Route\n          exact\n          path=\"/redirect\"\n          component={(props) => <RedirectPage {...props} />}\n        />\n        <Route\n          exact\n          path=\"/u/:username\"\n          component={(props) => (\n            <ProfilePage\n              globalState={this.props.globalState}\n              fetchCacheData={this.props.fetchCacheData}\n              saveSettings={this.saveSettings}\n              uploadTalk={this.props.uploadTalk}\n              deleteTalk={this.props.deleteTalk}\n              {...props}\n            />\n          )}\n        />\n        <Route\n          exact\n          path=\"/c/:company\"\n          component={(props) => (\n            <CompanyPage globalState={this.props.globalState} {...props} />\n          )}\n        />\n        <Route\n          exact\n          path=\"/t/:username/:talk\"\n          component={(props) => (\n            <TalkPage\n              globalState={this.props.globalState}\n              getTalk={this.props.getTalk}\n              {...props}\n            />\n          )}\n        />\n        <Route\n          exact\n          path=\"/donate/cancel\"\n          component={(props) => <MessagePage {...props} />}\n        />\n        <Route\n          exact\n          path=\"/donate/thankyou\"\n          component={(props) => <MessagePage {...props} />}\n        />\n        <Route\n          exact\n          path=\"/search\"\n          component={(props) => (\n            <SearchPage globalState={this.props.globalState} {...props} />\n          )}\n        /> */}\n        <Route\n          exact\n          path=\"/\"\n          render={function () {\n            return <h1>Root Layer</h1>;\n          }}\n        />\n        <Route\n          exact\n          path=\"/first\"\n          render={function () {\n            return <h1>First Layer</h1>;\n          }}\n        />\n        <Route\n          exact\n          path=\"/first/second\"\n          render={function () {\n            return <h1>Second Layer</h1>;\n          }}\n        />\n        <Route\n          path=\"/first/second/third\"\n          render={function () {\n            return <h1>Third Layer</h1>;\n          }}\n        />\n        <Route\n          render={function () {\n            return <h1>Not Found</h1>;\n          }}\n        />\n      </Switch>\n    );\n  }\n}\n\nexport default Routes;\n\n/**\n * SPDX-License-Identifier: (EUPL-1.2)\n * Copyright © Simon Prast\n */\n","//> React\n// Contains all the functionality necessary to define React components\nimport React from \"react\";\nimport Routes from \"./Routes\";\n// DOM bindings for React Router\nimport { BrowserRouter as Router } from \"react-router-dom\";\nclass App extends React.Component {\n  render() {\n    console.log(\"STATE MAP: Render - LOC App.js\");\n\n    return (\n      <Router>\n        {/* <ScrollToTop> */}\n        <div className=\"flyout\">\n          {/* <Navbar\n              username={this.state.user}\n              logmeout={this.logout}\n              users={this.getAllPageUrls}\n              globalState={this.state}\n            />\n            <ToastContainer\n              hideProgressBar={false}\n              newestOnTop={true}\n              autoClose={3000}\n            /> */}\n          <main\n          // className={\n          //   this.state.fetchedUser &&\n          //   this.state.fetchedUser.platformData.user &&\n          //   this.state.fetchedUser.platformData.user.settings &&\n          //   this.state.fetchedUser.platformData.user.settings.activeTheme\n          //     ? \"theme-\" +\n          //       this.state.fetchedUser.platformData.user.settings\n          //         .activeTheme\n          //     : undefined\n          // }\n          >\n            <Routes\n            // login={this.login}\n            // fetchCacheData={this.fetchCacheData}\n            // globalState={this.state}\n            // globalFunctions={{\n            //   handleLogin: this.handleLogin,\n            // }}\n            // registerUser={{\n            //   register: this.registerUser,\n            //   getGitLabServers: this.fetchGitLabServers,\n            // }}\n            // saveSettings={this.saveSettings}\n            // uploadTalk={this.uploadTalk}\n            // getTalk={this.getTalk}\n            // deleteTalk={this.deleteTalk}\n            />\n          </main>\n          {/* <Footer /> */}\n        </div>\n        {/* </ScrollToTop> */}\n      </Router>\n    );\n  }\n}\n\nexport default App;\n\n/**\n * SPDX-License-Identifier: (EUPL-1.2)\n * Copyright © Simon Prast\n */\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              //console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              //console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      //console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      //console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n\n/**\n * SPDX-License-Identifier: (EUPL-1.2)\n * Copyright © Simon Prast\n */\n","//> React\n// Contains all the functionality necessary to define React components\nimport React from \"react\";\n// This serves as an entry point to the DOM and server renderers for React\nimport ReactDOM from \"react-dom\";\n\n//> Font Awesome\n// Font Awesome is an awesome icon library\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\n\n//> Bootstrap\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\n\n//> MDB\n// \"Material Design for Bootstrap\" is a great UI design framework\nimport \"mdbreact/dist/css/mdb.css\";\n\n//> CSS\n// Root SCSS file\nimport \"./index.scss\";\n\n//> Components\n// Root component\nimport App from \"./App\";\n\nimport registerServiceWorker from \"./registerServiceWorker\";\n\n// Render the root component to <div id=\"root\"></div>\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nregisterServiceWorker();\n\n/**\n * SPDX-License-Identifier: (EUPL-1.2)\n * Copyright © Simon Prast\n */\n"],"sourceRoot":""}